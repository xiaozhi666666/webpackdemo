# .github/workflows/ci.yml
# 当前的 ci.yml（.yaml） 文件是一个 workflow，必须放置在项目的 .github/workflows 目录下

# name: 当前 workflow 的名称
name: ci

# Event
# 定义 Push 事件，当 demo/**、feat/** 和 fix/** 分支提交代码时触发当前工作流
# 这里只是一个分支设置示例，理论上除了 gh-pages 分支外，任何分支触发 Push 事件都应该执行 CI 流程
# 因此这里也可以反向利用 branches-ignore 排除 gh-pages 分支进行设置
on:
  push:
    branches-ignore:
      - gh-pages/**

# Job
# 当前 ci 只需要在一个 job 中完成
jobs:
  # job id，每一个 job 都有自己的 id，可用于 needs 进行继发执行
  # 例如以下示例中，deploy 必须依赖 test 和 build 执行完成
  # jobs:
  #   test:
  #   build:
  #     needs: test
  #   deploy:
  #     needs: [test, build]
  test:
    name: CI 执行流程

    # Runner
    # 在 Linux 环境中运行
    runs-on: ubuntu-latest

    # Step
    steps:
      # Step1
      - name: 下载 Github 仓库
        # Action
        # 这里使用社区提供的通用 Action
        # checkout action: https: //github.com/actions/checkout
        uses: actions/checkout@v4

      # Step2
      - name: 下载和安装 Node 环境
        # setup-node action: https://github.com/actions/setup-node
        uses: actions/setup-node@v3
        # with 是当前 action 的参数
        with:
          # 在 package.json 的 engines 中我们配置了  "node": ">=16.17.0"
          # 因此这里对安装的 Node 进行版本限定
          node-version:
            '16.x'
            # 安装 Yarn
          check-latest: true

      # Step3
      # 这里执行 Shell 脚本
      - name: 安装依赖
        run: yarn install --frozen-lockfile

      # Step4
      - name: 代码校验
        run: yarn lint-staged

      # Step5
      # - name: 单元测试
      #   run: yarn test

      # Step6
      # - name: 文档构建
      #   run: yarn run docs:build

      # Step7
      - name: 代码构建
        run: yarn run build
